11. Стек с защитой от ошибок
============================

+---------------------+----------------------------------+
| Ограничение времени | 1 секунда                        |
+---------------------+----------------------------------+
| Ограничение памяти  | 64 Mb                            |
+---------------------+----------------------------------+
| Ввод                | стандартный ввод или input.txt   |
+---------------------+----------------------------------+
| Вывод               | стандартный вывод или output.txt |
+---------------------+----------------------------------+

Научитесь пользоваться стандартной структурой данных stack для целых чисел. Напишите программу, содержащую описание стека и моделирующую работу стека, реализовав все указанные здесь методы. Программа считывает последовательность команд и в зависимости от команды выполняет ту или иную операцию. После выполнения каждой команды программа должна вывести одну строчку. Возможные команды для программы:

- `push n` --- Добавить в стек число n (значение n задается после команды). Программа должна вывести ok.
- `pop` --- Удалить из стека последний элемент. Программа должна вывести его значение.
- `back` --- Программа должна вывести значение последнего элемента, не удаляя его из стека.
- `size` --- Программа должна вывести количество элементов в стеке.
- `clear` --- Программа должна очистить стек и вывести ok.
- `exit` --- Программа должна вывести bye и завершить работу.

Перед исполнением операций `back` и `pop` программа должна проверять, содержится ли в стеке хотя бы один элемент. Если во входных данных встречается операция `back` или `pop`, и при этом стек пуст, то программа должна вместо числового значения вывести строку error.

Формат ввода
------------

Вводятся команды управления стеком, по одной на строке

Формат вывода
-------------- 

Программа должна вывести протокол работы стека, по одному сообщению на строке

Пример 1
--------

**Ввод**:

.. include:: in_1.txt
   :literal:

**Вывод**:

.. include:: out_1.txt
   :literal:

Пример 2
--------

**Ввод**:

.. include:: in_2.txt
   :literal:

**Вывод**:

.. include:: out_2.txt
   :literal:

Пример 3
--------

**Ввод**:

.. include:: in_3.txt
   :literal:

**Вывод**:

.. include:: out_3.txt
   :literal:

Примечание
----------

- Тест 4: `in_4.txt` / `out_4.txt` эквивалентен 1 тесту в контесте;
- Тест 5: `in_5.txt` / `out_5.txt` эквивалентен 12 тесту в контесте;
